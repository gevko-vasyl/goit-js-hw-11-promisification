{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","onSuccess","onError","min","max","Math","floor","random","resolveArgs","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GAQV,OANgB,IAAIC,SAAQ,SAACC,EAASC,GAClCC,YAAW,WACPF,EAAQF,KACTA,OAMLK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCChBXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAId,SAAQ,SAACC,EAASC,GACzBC,YAAW,WACP,IAAMY,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACtCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE7DhB,EAAQc,KACV,SAMJX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAM7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC3BnC,IAIMe,EAAkB,SAACC,EAAaC,EAAWC,GAC7C,OAAO,IAAItB,SAAQ,SAACC,EAASC,GACzB,IAN2BqB,EAAKC,EAM1B1B,GANqByB,EAMa,IANRC,EAMa,IAL5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAO9CpB,YAAW,WAGP,GAFmBsB,KAAKE,SAAW,GAEnB,CACZ,IAAMC,EAAc,CAAEC,GAAGT,EAAYS,GAAIxB,KAAKP,GAC9CG,EAAQ2B,QAER1B,EAAOkB,EAAYS,MAExB/B,OAKLgC,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIxB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BsB,EAA3B,iBAA8CxB,EAA9C,OAGI0B,EAAW,SAAAF,GACfvB,QAAQ0B,KAAR,gCAA6CH,EAA7C,8BAaFV,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,KAC/BzB,KAAKsB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,K","file":"main.1026a5e9e5f586065eae.js","sourcesContent":["const delay = ms => {\r\n  // Твой код\r\n    const promise = new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, ms);\r\n        \r\n    });\r\n    return promise\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n            );\r\n            resolve(updatedUsers);\r\n        },1000);\r\n        \r\n    });\r\n\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction, onSuccess, onError) => {\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                const resolveArgs = { id:transaction.id, time:delay };\r\n                resolve(resolveArgs);\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n        }, delay);\r\n        \r\n    });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}